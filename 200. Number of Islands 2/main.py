from typing import List
from queue import Queue
# def _nextxy(grid:List[List[str]],x:int,y:int,xbound,ybound)->(int,int):
#     # nextXY=[]
#     while True:
#         x=x+1
#         # potentialY=y+1
#         if x>xbound:
#             y+=1
#             x=0
#             if y>ybound:
#                 return (-1,-1)
#             continue
#         elif grid[y][x]=="-1" or grid[y][x]=="0":
#             continue
#         else:
#             return (x,y)


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ybound=len(grid)-1
        xbound=len(grid[0])-1
        q=Queue()

        # startX,startY=0,0
        count=0
        # while startX<=xbound and startY<=ybound or startX==-1 and startY==-1:
        for startX in range(xbound+1):
            for startY in range(ybound+1):
                if startY>ybound:
                    continue
                elif grid[startY][startX]=="0":# or grid[startY][startX]=="-1":
                    continue
                # print(startY,startX,end=" ")
                q.put([startY,startX])
                while not q.empty():
                    center=q.get()
                    y,x=center
                    if grid[y][x]=="0":
                        continue
                    grid[y][x]="0"#visited
                    for dy,dx in ([0,1],[1,0],[0,-1],[-1,0]):
                        occx=x+dx
                        occy=y+dy
                        if occy<0 or occy>ybound or occx<0 or occx>xbound:
                            continue
                        if grid[occy][occx]=="0":# or grid[occy][occx]=="-1":
                            continue
                        q.put([occy,occx])
                count += 1

        return count
if __name__=="__main__":
    c=Solution()
#     print(c.numIslands(grid = [
#   ["1","1","1","1","0"],
#   ["1","1","0","1","0"],
#   ["1","1","0","0","0"],
#   ["0","0","0","0","0"]
# ]))#1
    print(c.numIslands(grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]))#3
    # print(c.numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
    #                     ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
    #                     ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
    #                     ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    #                     ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    #                     ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
    #                     ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
    #                     ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
    #                     ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
    #                     ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    #                     ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))
