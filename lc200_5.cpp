#include <bits/stdc++.h>
#define testMain main
using namespace std;

class Solution {
private:
    int dir[5]={0,1,0,-1,0};
    bool inBound(int i,int j,int rmax,int cmax){
        return i>=0 && i<=rmax && j>=0 && j<=cmax;
    }
    void bfs(vector<vector<char>>& grid,int r0,int c0){
        int rmax=grid.size()-1;
        int cmax=grid[0].size()-1;
        queue<tuple<int,int>> q;
        q.emplace(r0,c0);
        while(!q.empty()){
            auto [r,c]=q.front();
            q.pop();
            grid[r][c]='0';
            for(int i=0;i<4;i++){
                int newR=r+dir[i];
                int newC=c+dir[i+1];
                if(!inBound(newR,newC,rmax,cmax) || grid[newR][newC]=='0') continue;
                q.emplace(newR,newC);
                grid[newR][newC]='0';
            }
        }
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int num=0;
        for(int r=0;r<grid.size();r++){
            for(int c=0;c<grid[0].size();c++){
                if(grid[r][c]=='0') continue;
                bfs(grid,r,c);
                num++;
            }
        }
        return num;
    }
};

// Helper function to run a test case and print pass (green) or fail (red)
void runTest(int testNum, vector<vector<char>> grid, int expected) {
    Solution sol;
    int result = sol.numIslands(grid);
    if (result == expected) {
        cout << "\033[1;32mTest Case " << testNum
             << " Passed: numIslands(...) = " << result
             << "\033[0m" << endl;
    } else {
        cout << "\033[1;31mTest Case " << testNum
             << " Failed: numIslands(...) = " << result
             << ", expected " << expected
             << "\033[0m" << endl;
    }
}

int testMain(){
    // Test Case 1:
    // Input:
    // [
    //  ["1","1","1","1","0"],
    //  ["1","1","0","1","0"],
    //  ["1","1","0","0","0"],
    //  ["0","0","0","0","0"]
    // ]
    // Expected Output: 1
    runTest(1, {
            {'1','1','1','1','0'},
            {'1','1','0','1','0'},
            {'1','1','0','0','0'},
            {'0','0','0','0','0'}
    }, 1);

    // Test Case 2:
    // Input:
    // [
    //  ["1","1","0","0","0"],
    //  ["1","1","0","0","0"],
    //  ["0","0","1","0","0"],
    //  ["0","0","0","1","1"]
    // ]
    // Expected Output: 3
    runTest(2, {
            {'1','1','0','0','0'},
            {'1','1','0','0','0'},
            {'0','0','1','0','0'},
            {'0','0','0','1','1'}
    }, 3);
    runTest(3, {
            {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
            {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
            {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
            {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
            {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
            {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
    }, 1);

    return 0;
}